{
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "title": "API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/api/v1/",
    "paths": {
        "/users": {
            "get": {
                "description": "params goes in specific order: id -\u003e login -\u003e email\nfirst found user will be returned. If no user found, there'll be an error with details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Find user by credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User login",
                        "name": "login",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "description": "User email",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User DTO model",
                        "schema": {
                            "$ref": "#/definitions/users_pb.UserModel"
                        }
                    },
                    "400": {
                        "description": "Request's field was not in a correct format",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    }
                }
            }
        },
        "/users/auth": {
            "get": {
                "description": "check if current user has legit token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticates user",
                "responses": {
                    "200": {
                        "description": "User successfully authorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAuthenticate.UserResponse"
                        }
                    },
                    "401": {
                        "description": "User does not authorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "404": {
                        "description": "User does not exists in database",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "log in user with provided login and password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authorizes user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users_pb.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully authorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserLogin.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    }
                }
            }
        },
        "/users/signin": {
            "post": {
                "description": "creates new user and authorizes it",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Registration",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users_pb.RegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered and authorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserRegister.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "500": {
                        "description": "Some internal error occured",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "$ref": "#/definitions/middleware.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.UserAuthenticate.UserResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.UserLogin.UserResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.UserRegister.UserResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "middleware.CustomError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {
                    "type": "array",
                    "items": {}
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "users_pb.LoginRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "users_pb.RegistrationRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password_repeat": {
                    "type": "string"
                }
            }
        },
        "users_pb.UserModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "Cookie"
        }
    }
}