// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "params goes in specific order: id -\u003e login -\u003e email\nfirst found user will be returned. If no user found, there'll be an error with details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Find user by credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User login",
                        "name": "login",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "description": "User email",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User DTO model",
                        "schema": {
                            "$ref": "#/definitions/users_pb.UserModel"
                        }
                    },
                    "400": {
                        "description": "Request's field was not in a correct format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/auth": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "check if current user has legit token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticates user",
                "responses": {
                    "200": {
                        "description": "User successfully authorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAuthenticate.UserResponse"
                        }
                    },
                    "401": {
                        "description": "User does not authorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User does not exists in database",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "log in user with provided login and password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authorizes user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users_pb.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully authorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserLogin.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/signin": {
            "post": {
                "description": "creates new user and authorizes it",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Registration",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users_pb.RegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered and authorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserRegister.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Some internal error occured",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service does not responding (maybe crush)",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/middleware.CustomError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/shared_pb.ErrorDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.UserAuthenticate.UserResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "admin"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user"
                    ]
                }
            }
        },
        "handlers.UserLogin.UserResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "admin"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user"
                    ]
                }
            }
        },
        "handlers.UserRegister.UserResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "admin"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user"
                    ]
                }
            }
        },
        "middleware.CustomError": {
            "description": "General error object. This structure always returns when error occured",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Internal gRPC error code (e.g. 3)",
                    "type": "integer",
                    "example": 3
                },
                "details": {
                    "description": "Error details. Check 'ErrorDetail' structure for more information",
                    "type": "array",
                    "items": {}
                },
                "message": {
                    "description": "Error message. Can be shown to users",
                    "type": "string",
                    "example": "Bad token provided"
                },
                "type": {
                    "description": "Error code in string (e.g. InvalidArgument)",
                    "type": "string",
                    "example": "InvalidArgument"
                }
            }
        },
        "shared_pb.ErrorDetail": {
            "description": "Error detail contains information about error",
            "type": "object",
            "properties": {
                "actualvalue": {
                    "description": "Actual value of field that causes the error. Note: 'password' field will be hidden",
                    "type": "string",
                    "example": "token"
                },
                "description": {
                    "description": "Error description. Only development purposes, do not show users",
                    "type": "string",
                    "example": "Field must be a jwt token"
                },
                "field": {
                    "description": "Field that error occured on",
                    "type": "string",
                    "example": "Token"
                },
                "struct": {
                    "description": "Structure that contains field",
                    "type": "string",
                    "example": "users_pb.TokenRequest"
                },
                "tag": {
                    "description": "Failed validation tag",
                    "type": "string",
                    "example": "jwt"
                }
            }
        },
        "users_pb.LoginRequest": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "users_pb.RegistrationRequest": {
            "type": "object",
            "required": [
                "email",
                "login",
                "password",
                "password_repeat"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "login": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 4
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                },
                "password_repeat": {
                    "type": "string"
                }
            }
        },
        "users_pb.UserModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "Cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/api/v1/",
	Schemes:          []string{},
	Title:            "API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
